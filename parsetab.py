
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIGUALrightIGUALQUEleftMAYQUEMENQUEleftMASMENOSleftPORDIVIDIDOleftPARIZQPARDERleftLLAVIZQLLAVDERAND BREAK CONTINUE DECIMAL DEF DIVIDIDO DOBPUNTO ELIF ELSE ENTERO FOR ID IF IGUAL IGUALQUE IN LLAVDER LLAVIZQ MAS MAYIGUAL MAYQUE MENIGUAL MENOS MENQUE NIGUALQUE OR PARDER PARIZQ POR PRINT PTCOMA RANGE RETURN STRING WHILEinit : instruccionesinstrucciones : instrucciones instruccioninstrucciones : instruccioninstruccion : imprimir_instr\n                   | asignacion_instr\n                   | if_instr\n                   | while_instr    \n    if_instr : IF PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDERstatement : imprimir_instr\n                 |  if_instr\n                 |  expresion\n                 |  while_instr\n    while_instr : WHILE PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDERasignacion_instr : ID IGUAL expresion PTCOMAexpresion : ENTERO\n                 |  DECIMAL\n                 |  STRING                 \n    expresion : IDimprimir_instr : PRINT PARIZQ expresion PARDER PTCOMA expresion_logica : expresion MENQUE expresion\n                         | expresion MAYQUE expresion\n                         | expresion IGUALQUE expresion\n                         | expresion NIGUALQUE expresion\n                         | expresion MENIGUAL expresion\n                         | expresion MAYIGUAL expresion\n    expresion_logica : PARIZQ expresion_logica PARDER MENQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MAYQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER IGUALQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER NIGUALQUE PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MAYIGUAL PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER MENIGUAL PARIZQ expresion_logica PARDER\n    expresion_logica : PARIZQ expresion_logica PARDER AND PARIZQ expresion_logica PARDER\n                        | PARIZQ expresion_logica PARDER OR PARIZQ expresion_logica PARDER\n                        | expresion_logica AND expresion_logica\n                        | expresion_logica OR expresion_logica\n    expresion : expresion MAS expresion\n                 | expresion MENOS expresion\n                 | expresion POR expresion\n                 | expresion DIVIDIDO expresion\n    '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,12,32,44,50,59,82,83,],[8,8,-3,-4,-5,-6,-7,-2,-14,-19,8,8,-8,-13,]),'ID':([0,2,3,4,5,6,7,12,13,14,15,16,23,28,29,30,31,32,35,36,37,38,39,40,41,42,44,50,59,74,75,76,77,78,79,80,81,82,83,],[9,9,-3,-4,-5,-6,-7,-2,21,21,21,21,21,21,21,21,21,-14,21,21,21,21,21,21,21,21,-19,21,21,21,21,21,21,21,21,21,21,-8,-13,]),'IF':([0,2,3,4,5,6,7,12,32,44,50,59,82,83,],[10,10,-3,-4,-5,-6,-7,-2,-14,-19,10,10,-8,-13,]),'WHILE':([0,2,3,4,5,6,7,12,32,44,50,59,82,83,],[11,11,-3,-4,-5,-6,-7,-2,-14,-19,11,11,-8,-13,]),'$end':([1,2,3,4,5,6,7,12,32,44,82,83,],[0,-1,-3,-4,-5,-6,-7,-2,-14,-19,-8,-13,]),'PARIZQ':([8,10,11,15,16,23,35,36,60,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,],[13,15,16,23,23,23,23,23,74,75,76,77,78,79,80,81,23,23,23,23,23,23,23,23,]),'IGUAL':([9,],[14,]),'ENTERO':([13,14,15,16,23,28,29,30,31,35,36,37,38,39,40,41,42,50,59,74,75,76,77,78,79,80,81,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'DECIMAL':([13,14,15,16,23,28,29,30,31,35,36,37,38,39,40,41,42,50,59,74,75,76,77,78,79,80,81,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'STRING':([13,14,15,16,23,28,29,30,31,35,36,37,38,39,40,41,42,50,59,74,75,76,77,78,79,80,81,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'PARDER':([17,18,19,20,21,24,26,33,45,46,47,48,51,52,53,54,55,56,57,58,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[27,-15,-16,-17,-18,34,43,49,-36,-37,-38,-39,-34,-35,-20,-21,-22,-23,-24,-25,92,93,94,95,96,97,98,99,-26,-27,-28,-29,-30,-31,-32,-33,]),'MAS':([17,18,19,20,21,22,25,45,46,47,48,53,54,55,56,57,58,71,],[28,-15,-16,-17,-18,28,28,-36,-37,-38,-39,28,28,28,28,28,28,28,]),'MENOS':([17,18,19,20,21,22,25,45,46,47,48,53,54,55,56,57,58,71,],[29,-15,-16,-17,-18,29,29,-36,-37,-38,-39,29,29,29,29,29,29,29,]),'POR':([17,18,19,20,21,22,25,45,46,47,48,53,54,55,56,57,58,71,],[30,-15,-16,-17,-18,30,30,30,30,-38,-39,30,30,30,30,30,30,30,]),'DIVIDIDO':([17,18,19,20,21,22,25,45,46,47,48,53,54,55,56,57,58,71,],[31,-15,-16,-17,-18,31,31,31,31,-38,-39,31,31,31,31,31,31,31,]),'PTCOMA':([18,19,20,21,22,27,45,46,47,48,],[-15,-16,-17,-18,32,44,-36,-37,-38,-39,]),'MENQUE':([18,19,20,21,25,45,46,47,48,49,],[-15,-16,-17,-18,37,-36,-37,-38,-39,60,]),'MAYQUE':([18,19,20,21,25,45,46,47,48,49,],[-15,-16,-17,-18,38,-36,-37,-38,-39,61,]),'IGUALQUE':([18,19,20,21,25,45,46,47,48,49,],[-15,-16,-17,-18,39,-36,-37,-38,-39,62,]),'NIGUALQUE':([18,19,20,21,25,45,46,47,48,49,],[-15,-16,-17,-18,40,-36,-37,-38,-39,63,]),'MENIGUAL':([18,19,20,21,25,45,46,47,48,49,],[-15,-16,-17,-18,41,-36,-37,-38,-39,65,]),'MAYIGUAL':([18,19,20,21,25,45,46,47,48,49,],[-15,-16,-17,-18,42,-36,-37,-38,-39,64,]),'AND':([18,19,20,21,24,26,33,45,46,47,48,49,51,52,53,54,55,56,57,58,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-15,-16,-17,-18,35,35,35,-36,-37,-38,-39,66,35,35,-20,-21,-22,-23,-24,-25,35,35,35,35,35,35,35,35,-26,-27,-28,-29,-30,-31,-32,-33,]),'OR':([18,19,20,21,24,26,33,45,46,47,48,49,51,52,53,54,55,56,57,58,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[-15,-16,-17,-18,36,36,36,-36,-37,-38,-39,67,36,36,-20,-21,-22,-23,-24,-25,36,36,36,36,36,36,36,36,-26,-27,-28,-29,-30,-31,-32,-33,]),'LLAVDER':([18,19,20,21,44,45,46,47,48,68,69,70,71,72,73,82,83,],[-15,-16,-17,-18,-19,-36,-37,-38,-39,82,-9,-10,-11,-12,83,-8,-13,]),'LLAVIZQ':([34,43,],[50,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,12,]),'imprimir_instr':([0,2,50,59,],[4,4,69,69,]),'asignacion_instr':([0,2,],[5,5,]),'if_instr':([0,2,50,59,],[6,6,70,70,]),'while_instr':([0,2,50,59,],[7,7,72,72,]),'expresion':([13,14,15,16,23,28,29,30,31,35,36,37,38,39,40,41,42,50,59,74,75,76,77,78,79,80,81,],[17,22,25,25,25,45,46,47,48,25,25,53,54,55,56,57,58,71,71,25,25,25,25,25,25,25,25,]),'expresion_logica':([15,16,23,35,36,74,75,76,77,78,79,80,81,],[24,26,33,51,52,84,85,86,87,88,89,90,91,]),'statement':([50,59,],[68,73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','parser.py',17),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','parser.py',21),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','parser.py',26),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','parser.py',30),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','parser.py',31),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','parser.py',32),
  ('instruccion -> while_instr','instruccion',1,'p_instruccion','parser.py',33),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDER','if_instr',7,'p_if','parser.py',38),
  ('statement -> imprimir_instr','statement',1,'p_statement','parser.py',44),
  ('statement -> if_instr','statement',1,'p_statement','parser.py',45),
  ('statement -> expresion','statement',1,'p_statement','parser.py',46),
  ('statement -> while_instr','statement',1,'p_statement','parser.py',47),
  ('while_instr -> WHILE PARIZQ expresion_logica PARDER LLAVIZQ statement LLAVDER','while_instr',7,'p_while','parser.py',53),
  ('asignacion_instr -> ID IGUAL expresion PTCOMA','asignacion_instr',4,'p_asignacion','parser.py',58),
  ('expresion -> ENTERO','expresion',1,'p_asignacion_tipo','parser.py',62),
  ('expresion -> DECIMAL','expresion',1,'p_asignacion_tipo','parser.py',63),
  ('expresion -> STRING','expresion',1,'p_asignacion_tipo','parser.py',64),
  ('expresion -> ID','expresion',1,'p_expresion_id','parser.py',69),
  ('imprimir_instr -> PRINT PARIZQ expresion PARDER PTCOMA','imprimir_instr',5,'p_print','parser.py',73),
  ('expresion_logica -> expresion MENQUE expresion','expresion_logica',3,'p_expresion_logica','parser.py',77),
  ('expresion_logica -> expresion MAYQUE expresion','expresion_logica',3,'p_expresion_logica','parser.py',78),
  ('expresion_logica -> expresion IGUALQUE expresion','expresion_logica',3,'p_expresion_logica','parser.py',79),
  ('expresion_logica -> expresion NIGUALQUE expresion','expresion_logica',3,'p_expresion_logica','parser.py',80),
  ('expresion_logica -> expresion MENIGUAL expresion','expresion_logica',3,'p_expresion_logica','parser.py',81),
  ('expresion_logica -> expresion MAYIGUAL expresion','expresion_logica',3,'p_expresion_logica','parser.py',82),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MENQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','parser.py',96),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MAYQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','parser.py',97),
  ('expresion_logica -> PARIZQ expresion_logica PARDER IGUALQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','parser.py',98),
  ('expresion_logica -> PARIZQ expresion_logica PARDER NIGUALQUE PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','parser.py',99),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MAYIGUAL PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','parser.py',100),
  ('expresion_logica -> PARIZQ expresion_logica PARDER MENIGUAL PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_logica_group','parser.py',101),
  ('expresion_logica -> PARIZQ expresion_logica PARDER AND PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','parser.py',111),
  ('expresion_logica -> PARIZQ expresion_logica PARDER OR PARIZQ expresion_logica PARDER','expresion_logica',7,'p_expresion_operador_logico','parser.py',112),
  ('expresion_logica -> expresion_logica AND expresion_logica','expresion_logica',3,'p_expresion_operador_logico','parser.py',113),
  ('expresion_logica -> expresion_logica OR expresion_logica','expresion_logica',3,'p_expresion_operador_logico','parser.py',114),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_operaciones','parser.py',122),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_operaciones','parser.py',123),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_operaciones','parser.py',124),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion_operaciones','parser.py',125),
]
